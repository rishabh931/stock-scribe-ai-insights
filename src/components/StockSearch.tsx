import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Search, Loader2 } from 'lucide-react';
import { toast } from '@/hooks/use-toast';

interface StockSearchProps {
  onStockSelect: (stock: string) => void;
  onDataLoad: (data: any) => void;
  onInsightsLoad: (insights: any) => void;
  onLoadingChange: (loading: boolean) => void;
}

const SAMPLE_STOCKS = ['TCS', 'RELIANCE', 'INFY', 'HDFC', 'CDSL', 'ITC', 'SBI', 'WIPRO', 'MARUTI', 'ASIANPAINT'];

export const StockSearch = ({ onStockSelect, onDataLoad, onInsightsLoad, onLoadingChange }: StockSearchProps) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const generateMockData = (stockName: string) => {
    const years = ['2020', '2021', '2022', '2023', '2024'];
    const baseRevenue = Math.floor(Math.random() * 50000) + 10000;
    
    return years.map((year, index) => {
      const revenue = baseRevenue + (index * Math.floor(Math.random() * 5000) + 1000);
      const eps = Math.floor(Math.random() * 100) + 50 + (index * 10);
      const prevEps = index > 0 ? (baseRevenue/1000 + ((index-1) * 10) + 50) : eps;
      const epsGrowth = index > 0 ? Math.round(((eps - prevEps) / prevEps) * 100 * 100) / 100 : 0;
      
      return {
        year,
        revenue,
        operatingProfit: Math.floor(revenue * (0.15 + Math.random() * 0.15)),
        opm: Math.floor(Math.random() * 20) + 10,
        pbt: Math.floor(revenue * (0.12 + Math.random() * 0.08)),
        pat: Math.floor(revenue * (0.08 + Math.random() * 0.07)),
        eps,
        epsGrowth,
        pegRatio: (Math.random() * 2 + 0.5).toFixed(1),
        roe: Math.floor(Math.random() * 25) + 10,
        roce: Math.floor(Math.random() * 20) + 8,
        netWorth: Math.floor(revenue * (0.4 + Math.random() * 0.3)),
        totalAssets: Math.floor(revenue * (0.8 + Math.random() * 0.4))
      };
    });
  };

  const getAIInsights = async (stockName: string, financialData: any[]) => {
    try {
      console.log('Calling DeepSeek API for insights...');
      
      const revenueInsights = await getInsightForSection(stockName, financialData, 'revenue');
      const profitabilityInsights = await getInsightForSection(stockName, financialData, 'profitability');
      const epsInsights = await getInsightForSection(stockName, financialData, 'eps');
      const sentimentInsights = await getInsightForSection(stockName, financialData, 'sentiment');
      
      return {
        revenue: revenueInsights,
        profitability: profitabilityInsights,
        eps: epsInsights,
        sentiment: sentimentInsights
      };
    } catch (error) {
      console.error('AI API Error:', error);
      return generateFallbackInsights(stockName, financialData);
    }
  };

  const getInsightForSection = async (stockName: string, financialData: any[], section: string) => {
    const prompts = {
      revenue: `Analyze ${stockName}'s Revenue & Operating Performance over 5 years (2020-2024):\n${JSON.stringify(financialData, null, 2)}\n\nProvide comprehensive insights on:\nâ€¢ Revenue CAGR calculation with year-over-year growth rates\nâ€¢ Operating margin (OPM) evolution, efficiency trends, and operational leverage\nâ€¢ Revenue consistency, volatility analysis, and growth quality assessment\nâ€¢ Operational scalability, cost management effectiveness\nâ€¢ Market share dynamics and competitive positioning\nâ€¢ Seasonal patterns and cyclical trends if any\nâ€¢ Impact of external factors on revenue performance\nâ€¢ Future revenue sustainability and growth prospects`,
      
      profitability: `Analyze ${stockName}'s Profitability Metrics over 5 years (2020-2024):\n${JSON.stringify(financialData, null, 2)}\n\nProvide comprehensive insights on:\nâ€¢ PAT vs PBT trends, tax efficiency, and effective tax rate analysis\nâ€¢ Profit margin evolution (gross, operating, net) and sustainability\nâ€¢ Bottom-line growth quality, earnings consistency, and volatility\nâ€¢ One-time impacts, exceptional items, and core earnings analysis\nâ€¢ Working capital management and cash conversion efficiency\nâ€¢ Financial leverage impact on profitability\nâ€¢ Return ratios (ROE, ROCE, ROIC) trends and peer comparison\nâ€¢ Profit reinvestment patterns and dividend policy impact\nâ€¢ Margin expansion/contraction drivers and future outlook`,
      
      eps: `Analyze ${stockName}'s EPS Performance & Valuation over 5 years (2020-2024):\n${JSON.stringify(financialData, null, 2)}\n\nProvide comprehensive insights on:\nâ€¢ EPS CAGR calculation and year-over-year growth trajectory\nâ€¢ EPS volatility analysis, earnings quality, and sustainability\nâ€¢ Share buyback impact, dilution effects, and share count changes\nâ€¢ PEG ratio valuation assessment and peer comparison\nâ€¢ Earnings predictability and guidance accuracy\nâ€¢ Book value per share trends and tangible book value\nâ€¢ Dividend per share evolution and payout ratio analysis\nâ€¢ Growth vs valuation attractiveness and risk-reward assessment\nâ€¢ Forward P/E implications and investment recommendation\nâ€¢ Price target justification based on EPS trends`,
      
      sentiment: `Based on ${stockName}'s 5-year financial performance (2020-2024):\n${JSON.stringify(financialData, null, 2)}\n\nProvide detailed sentiment analysis with:\n\n**POSITIVE FACTORS:**\nâ€¢ Strong growth indicators and competitive advantages\nâ€¢ Operational efficiency improvements and margin expansion\nâ€¢ Financial health strengths and stability factors\nâ€¢ Market position strengths and growth opportunities\nâ€¢ Management effectiveness and strategic initiatives\n\n**NEGATIVE FACTORS:**\nâ€¢ Growth challenges and margin pressure concerns\nâ€¢ Financial health risks and operational weaknesses\nâ€¢ Market headwinds and competitive threats\nâ€¢ Valuation concerns and risk factors\nâ€¢ Regulatory or industry-specific challenges\n\n**OVERALL SENTIMENT:** Bullish/Neutral/Bearish with detailed reasoning`
    };

    const response = await fetch('https://api.deepseek.com/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer 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',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: 'You are a senior equity research analyst with 15+ years experience. Provide detailed, data-driven insights with specific calculations, ratios, and trends. Use bullet points, emojis, and be comprehensive yet easy to understand. Always include specific numbers from the data.'
          },
          {
            role: 'user',
            content: prompts[section as keyof typeof prompts]
          }
        ],
        temperature: 0.2,
        max_tokens: 1200,
        stream: false
      }),
    });

    if (!response.ok) {
      throw new Error(`API call failed with status ${response.status}`);
    }

    const data = await response.json();
    return data.choices[0]?.message?.content || generateSectionFallback(section, financialData);
  };

  const generateFallbackInsights = (stockName: string, financialData: any[]) => {
    return {
      revenue: generateSectionFallback('revenue', financialData),
      profitability: generateSectionFallback('profitability', financialData),
      eps: generateSectionFallback('eps', financialData),
      sentiment: generateSectionFallback('sentiment', financialData)
    };
  };

  const generateSectionFallback = (section: string, data: any[]) => {
    const templates = {
      revenue: `**ðŸ“ˆ Revenue Growth Analysis (5 Years):**\nâ€¢ Revenue CAGR: Strong ${((Math.pow(data[data.length-1].revenue / data[0].revenue, 1/4) - 1) * 100).toFixed(1)}% compound growth\nâ€¢ Revenue Evolution: From â‚¹${data[0].revenue.toLocaleString()}Cr (2020) to â‚¹${data[data.length-1].revenue.toLocaleString()}Cr (2024)\nâ€¢ Operating Efficiency: OPM trend from ${data[0].opm}% to ${data[data.length-1].opm}%\nâ€¢ Growth Quality: ${data.every((d, i) => i === 0 || d.revenue >= data[i-1].revenue) ? 'Consistent' : 'Volatile'} revenue trajectory\nâ€¢ Market Position: Strong operational performance with sustainable competitive advantages`,
      
      profitability: `**ðŸ’° Profitability Deep Dive (5 Years):**\nâ€¢ Profit Growth: PAT increased from â‚¹${data[0].pat.toLocaleString()}Cr to â‚¹${data[data.length-1].pat.toLocaleString()}Cr\nâ€¢ Tax Efficiency: Current PBT to PAT conversion shows ${((data[data.length-1].pat / data[data.length-1].pbt) * 100).toFixed(1)}% efficiency\nâ€¢ Margin Trends: ${data[data.length-1].pat > data[0].pat ? 'Expanding' : 'Contracting'} bottom-line margins over 5-year period\nâ€¢ Earnings Quality: ${data.filter((d, i) => i > 0 && d.pat > data[i-1].pat).length >= data.length/2 ? 'Strong' : 'Mixed'} earnings consistency\nâ€¢ Return Metrics: ROE averaging ${(data.reduce((sum, d) => sum + d.roe, 0) / data.length).toFixed(1)}%, ROCE averaging ${(data.reduce((sum, d) => sum + d.roce, 0) / data.length).toFixed(1)}%`,
      
      eps: `**ðŸ“Š EPS & Valuation Analysis (5 Years):**\nâ€¢ EPS Trajectory: Grew from â‚¹${data[0].eps} (2020) to â‚¹${data[data.length-1].eps} (2024)\nâ€¢ EPS CAGR: ${((Math.pow(data[data.length-1].eps / data[0].eps, 1/4) - 1) * 100).toFixed(1)}% compound growth\nâ€¢ Growth Consistency: ${data.filter((d, i) => i > 0 && d.epsGrowth > 0).length}/${data.length-1} years showed positive EPS growth\nâ€¢ Valuation Assessment: Current PEG ratio of ${data[data.length-1].pegRatio} suggests ${parseFloat(data[data.length-1].pegRatio) < 1 ? 'undervalued' : parseFloat(data[data.length-1].pegRatio) < 1.5 ? 'fairly valued' : 'expensive'} stock\nâ€¢ Investment Merit: ${parseFloat(data[data.length-1].pegRatio) < 1.2 ? 'Attractive' : 'Cautious'} risk-reward profile based on growth-valuation matrix`,
      
      sentiment: `**ðŸŽ¯ Sentiment Analysis:**\n\n**POSITIVE FACTORS:**\nâ€¢ Revenue CAGR of ${((Math.pow(data[data.length-1].revenue / data[0].revenue, 1/4) - 1) * 100).toFixed(1)}% shows strong growth momentum\nâ€¢ Consistent operational efficiency with stable margins\nâ€¢ Strong return ratios indicating effective capital allocation\nâ€¢ Robust financial health with growing profitability\n\n**NEGATIVE FACTORS:**\nâ€¢ Some volatility in year-over-year performance\nâ€¢ Valuation concerns at current PEG levels\nâ€¢ Market dependency and cyclical risks\nâ€¢ Competitive pressure in the industry\n\n**OVERALL SENTIMENT:** ${parseFloat(data[data.length-1].pegRatio) < 1.2 && data[data.length-1].roe > 15 ? 'BULLISH' : parseFloat(data[data.length-1].pegRatio) > 2 ? 'BEARISH' : 'NEUTRAL'} - Based on growth metrics and valuation parameters`
    };
    
    return templates[section as keyof typeof templates];
  };

  const handleSearch = async () => {
    if (!searchTerm.trim()) {
      toast({
        title: "Please enter a stock name",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);
    onLoadingChange(true);

    try {
      const mockData = generateMockData(searchTerm.toUpperCase());
      const insights = await getAIInsights(searchTerm.toUpperCase(), mockData);
      
      onStockSelect(searchTerm.toUpperCase());
      onDataLoad(mockData);
      onInsightsLoad(insights);
      
      toast({
        title: `Analysis completed for ${searchTerm.toUpperCase()}`,
        description: "5-year financial data analyzed with AI-powered insights"
      });
    } catch (error) {
      console.error('Search error:', error);
      toast({
        title: "Error loading stock analysis",
        description: "Please try again later",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
      onLoadingChange(false);
    }
  };

  const handleStockClick = (stock: string) => {
    setSearchTerm(stock);
  };

  return (
    <div className="space-y-4">
      <div className="flex gap-3">
        <div className="flex-1">
          <Input
            placeholder="Enter stock name (e.g., TCS, RELIANCE, INFY)"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
            className="text-lg py-6 border-2 focus:border-blue-500"
          />
        </div>
        <Button 
          onClick={handleSearch}
          disabled={isLoading}
          className="px-8 py-6 bg-blue-600 hover:bg-blue-700"
        >
          {isLoading ? (
            <Loader2 className="h-5 w-5 animate-spin" />
          ) : (
            <Search className="h-5 w-5" />
          )}
        </Button>
      </div>

      <div className="flex flex-wrap gap-2">
        <span className="text-sm text-slate-600 mr-2">Popular stocks:</span>
        {SAMPLE_STOCKS.map((stock) => (
          <Button
            key={stock}
            variant="outline"
            size="sm"
            onClick={() => handleStockClick(stock)}
            className="text-xs hover:bg-blue-50 hover:border-blue-200"
          >
            {stock}
          </Button>
        ))}
      </div>
    </div>
  );
};
